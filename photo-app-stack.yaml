Parameters:
  # CIDR for VPC
  NetworkCIDR:
    Description: CIDR for VPC
    Type: String
    Default: 10.0.0.0/16
  # AZ for Subnet
  AvailabilityZoneName:
    Description: AZ for Subnet
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-south-1a
  # CIDR for Subnet
  SubnetCIDR:
    Description: CIDR for Subnet
    Type: String
    Default: 10.0.1.0/24
  # SSH KeyPair for EC2 instance
  KeyPairName:
    Description: EC2 KeyPair for SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Existing EC2 KeyPair.
  # EC2 Instance type
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  # EC2 ImageId - Ubuntu 16:04LTS
  InstanceImageId:
    Description: EC2 Image Id
    Type: AWS::EC2::Image::Id
    Default: ami-0e4bc04bd401729d6
  # S3 Buckect name
  BucketName:
    Description: S3 Bucket for photo upload
    Type: String

Resources:
  # VPC cerate
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref NetworkCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
       - Key: Name
         Value: app-vpc
       - Key: Application
         Value: !Ref 'AWS::StackName'
  # IGW cerate
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
       - Key: Name
         Value: app-igw
       - Key: Application
         Value: !Ref 'AWS::StackName'
  # Attaching the IGW to VPC
  vpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  # RouteTable Cerate
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: app-route-table
       - Key: Application
         Value: !Ref 'AWS::StackName'
  # Update routes
  Routes:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref IGW
  # NACL
  PublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: app-nacl
        - Key: Application
          Value: !Ref 'AWS::StackName'
  # Allow all incoming TCP traffic
  NaclRulesForInboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  # Allow all outgoing TCP traffic
  NaclRulesForOutboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  # Creating  subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZoneName
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: app-subnet
      - Key: Application
        Value: !Ref 'AWS::StackName'
  # Subnet association with route table
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable
  # Subnet association with NACL
  SubnetNaclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNACL

  # Creating security group
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 80 and 22
      GroupName: app-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
       - Key: Name
         Value: app-sg
       - Key: Application
         Value:
           Ref: "AWS::StackName"
  # Allow traffic withing sg
  SGBaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SG
      IpProtocol: '-1'
      FromPort: '-1'
      ToPort: '-1'
      SourceSecurityGroupId: !Ref SG
  # EC2 access
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SG
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          apt-get update
          apt-get install -y docker-ce
          curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          systemctl daemon-reload
          systemctl restart docker
      KeyName: !Ref KeyPairName
      ImageId: !Ref InstanceImageId
      Tags:
       - Key: Name
         Value: app-ec2
       - Key: Application
         Value:
           Ref: "AWS::StackName"
  # Creating S3 bucket
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead

  #  Creating RDS
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: photo_app_db
      Engine: MySQL
      MasterUsername: root
      MasterUserPassword: password987
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '5'
      DBInstanceIdentifier: photo-app-database
      DBSecurityGroups:
        - !Ref DatabaseSG
  # RDS SecurityGroup
  DatabaseSG:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Security Group for RDS public access
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0


  # Outputs
Outputs:
  InstanceId:
    Description: InstanceId of the EC2 instance
    Value: !Ref EC2Instance

  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt
      - EC2Instance
      - PublicIp

  RDSInstanceDNS:
    Description: Public DNS of the RDS Instance
    Value: !GetAtt
      - DatabaseInstance
      - Endpoint.Address
